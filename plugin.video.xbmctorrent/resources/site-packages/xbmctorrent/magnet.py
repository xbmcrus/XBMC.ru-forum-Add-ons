from xbmctorrent.plugin import plugin

PUBLIC_TRACKERS = [
    "udp://tracker.publicbt.com:80/announce",
    "udp://tracker.openbittorrent.com:80/announce",
    "udp://open.demonii.com:1337/announce",
    "udp://tracker.istole.it:80/announce",
    "udp://coppersurfer.tk:6969/announce",
    "udp://tracker.btzoo.eu:80/announce",
    "udp://bt.rutor.org:2710",
]

# Add default trackers to a magnet link, to improve its reachability
def _boost_magnet(magnet):
    from urllib import urlencode
    return "%s&%s" % (magnet, urlencode({"tr": PUBLIC_TRACKERS}, True))

def ensure_magnet(uri):
    if not uri.startswith("magnet:"):
        uri = get_magnet(uri)
    return uri


def display_name(magnet_uri):
    import urlparse
    from xbmctorrent.utils import first
    magnet_args = urlparse.parse_qs(magnet_uri.replace("magnet:?", ""))
    return first(magnet_args.get("dn", []))


@plugin.route("/play/<uri>", options={"pulsar":"0"})
@plugin.route("/play/pulsar/<uri>", name="play_with_pulsar", options={"pulsar":"1"})
def play(uri, pulsar):
    if not uri.startswith("http://") and not uri.startswith("https://") and not uri.startswith("magnet:"):
       with open(uri, 'rb') as file: 
           torrent_data = file.read()

       from xbmctorrent.magnet import generate_magnet
       from bencode import bdecode

       metadata = bdecode(torrent_data)
       uri = generate_magnet(metadata)

    if int(pulsar):
        from urllib import urlencode
        plugin.set_resolved_url("plugin://plugin.video.pulsar/play?%s" % urlencode({ "uri" : uri }))
    else:
        if uri.startswith("magnet:") and plugin.get_setting("magnet_boost", bool):
            plugin.log.info("Enabled magnet booster")
            uri = _boost_magnet(uri)

        from xbmctorrent.player import TorrentPlayer
        TorrentPlayer().init(uri).loop()

def get_magnet(url):
    from bencode import bdecode
    from xbmctorrent.utils import url_get

    return generate_magnet(bdecode(url_get(url, headers=HEADERS)))

def generate_magnet(metadata, dn = None):
    import hashlib, base64, urllib
    from bencode import bencode

    tr = []
    if "announce-list" in metadata:
        tmp = metadata["announce-list"]
        if isinstance(tmp, list):
            for i in tmp:
                if isinstance(i, list): tr += i
                else: tr.append(i)
    if "announce" in metadata and not metadata["announce"] in tr:
        tr.append(metadata["announce"])

    params = { 
        "dn": dn or metadata["info"].get("name", None), 
        "tr": tr
    }

    b32hash = base64.b32encode(hashlib.sha1(bencode(metadata["info"])).digest())
    return "magnet:?%s&%s" % ("xt=urn:btih:%s" % b32hash, urllib.urlencode(params, True))

