# -*- coding: utf-8 -*-

import re, fnmatch, urllib2
from xbmctorrent import plugin
from xbmctorrent.caching import shelf
from xbmctorrent.common import RESOURCES_PATH

PAC_URL = "http://antizapret.prostovpn.org/proxy.pac"
CACHE = 24 * 3600 # 24 hour caching

_config = {}
def config():
    global _config
    if not _config:
        with shelf("xbmctorrent.antizapret.pac_config", ttl=CACHE) as pac_config:
            if not pac_config:
                plugin.log.info("Fetching Antizapret PAC file")
                try:
                    pac_data = urllib2.urlopen(PAC_URL).read()
                except:
                    pac_data = ""

                r = re.search(r"\"PROXY (.*); DIRECT", pac_data)
                if not r: # If antizapret bloked then read local copy
                    import os
                    with open(os.path.join(RESOURCES_PATH, "proxy.pac"), "r") as pacfile:
                        pac_data = pacfile.read()

                r = re.search(r"\"PROXY (.*); DIRECT", pac_data)
                if r:
                    pac_config["server"] = r.group(1)
                    pac_config["domains"] = map(lambda x: x.replace(r"\Z(?ms)", "").replace("\\", ""), map(fnmatch.translate, re.findall(r"\"(.*?)\",", pac_data)))
                else:
                    pac_config["server"] = None
                    pac_config["domains"] = []
            _config = pac_config
    return _config

class AntizapretProxyHandler(urllib2.ProxyHandler, object):
    def __init__(self):
        self.config = config()
        urllib2.ProxyHandler.__init__(self, {
            "http" : "<empty>", 
            "https": "<empty>", 
            "ftp"  : "<empty>", 
        })
    def proxy_open(self, req, proxy, type):
        import socket

        if socket.gethostbyname(req.get_host().split(":")[0]) in self.config["domains"]:
            return urllib2.ProxyHandler.proxy_open(self, req, self.config["server"], type)

        return None

def url_get(url, params={}, headers={}, post = None):
    from contextlib import closing
    from xbmctorrent import plugin
    from xbmctorrent.common import USER_AGENT

    if params:
        import urllib
        url = "%s?%s" % (url, urllib.urlencode(params))

    if post:
        import urllib
        post = urllib.urlencode(post)

    req = urllib2.Request(url, post)
    req.add_header("User-Agent", USER_AGENT)
    for k, v in headers.items():
        req.add_header(k, v)
    try:
        with closing(urllib2.urlopen(req)) as response:
            data = response.read()
            if response.headers.get("Content-Encoding", "") == "gzip":
                import zlib
                return zlib.decompressobj(16 + zlib.MAX_WBITS).decompress(data)
            return data
    except urllib2.HTTPError as e:
        plugin.log.error("HTTP Error(%s): %s" % (e.errno, e.strerror))
        return None

